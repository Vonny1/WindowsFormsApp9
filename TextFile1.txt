// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using QuickType;
//
//    var workerTable = WorkerTable.FromJson(jsonString);
//    var workerFullinfo = WorkerFullinfo.FromJson(jsonString);
//    var workerArrive = WorkerArrive.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WorkerTable
    {
        [JsonProperty("model")]
        public string Model { get; set; }

        [JsonProperty("pk")]
        public long Pk { get; set; }

        [JsonProperty("fields")]
        public WorkerTableFields Fields { get; set; }
    }

    public partial class WorkerTableFields
    {
        [JsonProperty("firstname")]
        public string Firstname { get; set; }

        [JsonProperty("lastname")]
        public string Lastname { get; set; }

        [JsonProperty("patronymic")]
        public string Patronymic { get; set; }
    }

    public partial class WorkerFullinfo
    {
        [JsonProperty("model")]
        public string Model { get; set; }

        [JsonProperty("pk")]
        public long Pk { get; set; }

        [JsonProperty("fields")]
        public WorkerFullinfoFields Fields { get; set; }
    }

    public partial class WorkerFullinfoFields
    {
        [JsonProperty("worker")]
        public long Worker { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("phonenumber")]
        public long Phonenumber { get; set; }
    }

    public partial class WorkerArrive
    {
        [JsonProperty("model")]
        public string Model { get; set; }

        [JsonProperty("pk")]
        public long Pk { get; set; }

        [JsonProperty("fields")]
        public WorkerArriveFields Fields { get; set; }
    }

    public partial class WorkerArriveFields
    {
        [JsonProperty("worker")]
        public long Worker { get; set; }

        [JsonProperty("date")]
        public DateTime Date { get; set; }

        [JsonProperty("time")]
        public DateTime Time { get; set; }
    }

    public partial class WorkerTable
    {
        public static List<WorkerTable> FromJson(string json) => JsonConvert.DeserializeObject<List<WorkerTable>>(json, QuickType.Converter.Settings);
    }

    public partial class WorkerFullinfo
    {
        public static List<WorkerFullinfo> FromJson(string json) => JsonConvert.DeserializeObject<List<WorkerFullinfo>>(json, QuickType.Converter.Settings);
    }

    public partial class WorkerArrive
    {
        public static List<WorkerArrive> FromJson(string json) => JsonConvert.DeserializeObject<List<WorkerArrive>>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<WorkerTable> self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this List<WorkerFullinfo> self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this List<WorkerArrive> self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
